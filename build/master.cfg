# -*- python -*-
# ex: set filetype=python:

#
# Noteworthy Buildbot features used here:
# - Virtual builders
#   - https://docs.buildbot.net/current/manual/configuration/builders.html#virtual-builders
# - Dynamic build factories a.k.a. addStepsAfterCurrentStep
#   - https://docs.buildbot.net/latest/manual/configuration/buildfactories.html#dynamic-build-factories
# - Trigger steps and Triggerable schedulers
#   - https://docs.buildbot.net/current/manual/configuration/steps/trigger.html#buildbot.steps.trigger.Trigger
#
# TODO: parallel sub-builds, see https://github.com/buildbot/buildbot/issues/3088#issuecomment-1133593175
# TODO: will old/unused virtual builders be removed by janitor?
#

from buildbot.plugins import *

from asyncbuild import *

c = BuildmasterConfig = {}

c['title'] = "Hello World CI"
c['titleURL'] = "https://buildbot.github.io/hello-world/"
c['buildbotURL'] = "http://localhost:8010/"

c['db'] = {'db_url': "sqlite:///state.sqlite"}
c['protocols'] = {'pb': {'port': 9989}}
c['workers'] = [
    worker.Worker("masterworker", "pass"),
    worker.Worker("worker1", "pass"),
    worker.Worker("worker2", "pass"),
    worker.Worker("worker3", "pass"),
    worker.Worker("worker4", "pass"),
    worker.Worker("worker5", "pass"),
    worker.Worker("worker6", "pass"),
    worker.Worker("worker7", "pass"),
    worker.Worker("worker8", "pass")]

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

c['services'] = []
c['change_source'] = [
    changes.GitPoller(
        'https://github.com/pktpls/falter-packages.git',
        workdir='falter-workdir',
        branch='master',
        pollInterval=60),
]

c['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name="all",
        # TODO: eventually: master|openwrt-22.03|openwrt-21.02
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["packages"]),
    schedulers.ForceScheduler(
        name="force",
        builderNames=["packages"],
        codebases=[
            util.CodebaseParameter(
                "",
                branch=util.ChoiceStringParameter(
                    name="branch",
                    choices=["master", "openwrt-22.03", "openwrt-21.02"],
                    default="master"),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(
                    name="repository",
                    default="https://github.com/freifunk-berlin/falter-packages"),
                project=util.FixedParameter(name="project", default=""),
            ),
        ]),
    schedulers.Triggerable(
        name="packages-arch",
        builderNames=["packages-arch"])]

# Passed by packagesFactory to AsyncBuildGenerator to be called for each arch.
def archTriggerStep(arch):
    # return steps.Trigger(
    return AsyncTrigger(
        name=util.Interpolate("trigger packages/%(prop:branch)s/%(kw:arch)s", arch=arch),
        schedulerNames=["packages-arch"],
        waitForFinish=True,
        updateSourceStamp=True,
        set_properties={
            'arch': arch,
            'branch': util.Interpolate("%(prop:branch)s"),
            'origbuildnumber': util.Interpolate("%(prop:buildnumber)s"),
            'virtual_builder_name': util.Interpolate("packages/%(prop:branch)s/%(kw:arch)s", arch=arch),
            'virtual_builder_tags': ["packages", util.Interpolate("branch:%(prop:branch)s"), "arch:{0}".format(arch)]})

# Fans out to one builder per arch and blocks for the results.
#
# TODO: use repo url from sourcestamp
def packagesFactory(f):
    f.buildClass = AsyncBuild
    f.addStep(
        steps.Git(
            name="git clone",
            repourl='https://github.com/pktpls/falter-packages',
            mode='incremental'))
    f.addStep(
        # TODO: doesn't fail if targets-*.txt doesn't exist
        AsyncBuildGenerator(archTriggerStep,
            name="generate builds",
            command=["sh", "-c", util.Interpolate(
                "cat build/targets-%(prop:branch)s.txt | grep -v '#' | cut -d' ' -f1")]))

    return f

# Runs build.sh with prop:arch and prop:branch, and uploads the result to master.
#
# TODO: use repo url from sourcestamp
def packagesArchFactory(f):
    f.addStep(
        steps.ShellCommand(
            name="build",
            command=["sh", "-c", util.Interpolate(
                "podman run -i --rm alpine:edge sh -c '( apk add git bash wget xz coreutils build-base gcc abuild binutils ncurses-dev gawk bzip2 perl python3 rsync && git clone https://github.com/pktpls/falter-packages.git /root/falter-packages && cd /root/falter-packages/ && git checkout %(prop:branch)s && build/build.sh %(prop:branch)s %(prop:arch)s out/ ) >&2 && cd /root/falter-packages/out/ && tar -c *' > out.tar")]))

    tarfile = util.Interpolate("packages-%(prop:origbuildnumber)s-%(prop:arch)s.tar")
    wwwdir = util.Interpolate("public_html/builds/packages/%(prop:origbuildnumber)s")
    f.addStep(
        steps.FileUpload(
            name="upload",
            workersrc="out.tar",
            masterdest=tarfile))
    f.addStep(
        steps.MasterShellCommand(
            name="extract",
            command=["sh", "-c", util.Interpolate(
                "mkdir -vp %(kw:wwwdir)s && tar -v -C %(kw:wwwdir)s -xf %(kw:tarfile)s && rm -vf %(kw:tarfile)s",
                tarfile=tarfile, wwwdir=wwwdir)]))
    f.addStep(
        steps.MasterShellCommand(
            name="sign",
            command=["sh", "-c", util.Interpolate(
                "signify -S -m %(kw:wwwdir)s/%(prop:arch)s/falter/Packages -s packagefeed_master.sec",
                wwwdir=wwwdir)]))

    return f

c['builders'] = [
    util.BuilderConfig(
        name="packages",
        workernames=["masterworker"],
        factory=packagesFactory(util.BuildFactory())),
    util.BuilderConfig(
        name="packages-arch",
        workernames=["worker1", "worker2", "worker3", "worker4", "worker5", "worker6", "worker7", "worker8"],
        factory=packagesArchFactory(util.BuildFactory()),
        collapseRequests=False)]
